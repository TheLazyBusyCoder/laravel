
1) create database (we have to create this using cli) 

2) create database migrations 
(create tables in database)

// create migration file 
php artisan make:migration create_student_table 
this creates a new file in Project/database/migrations/

    public function up(): void
    {
        Schema::create('student', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
            $table->string('name');
            $table->string('email');
        });
    }

In this we have to define the columns etc. 

php artisan migrate -> to automatically make tables from the migraion file into the database. 
php artisan migrate:status -> to check status. 

To undo: 
php artisan migrate:rollback 
php artisan migrate:rollback --steps=3 // remove last 3 migrations
php artisan migrate:rollback --steps=3 // remove last 3 migrations

// to delete all tables. 
php artisan migrate:reset

// remove last effects. 
php artisan migrate:refresh

// delete tables and then re create it. 
php artisan migrate:fresh

// Create model + migration file 
php artisan make:model ModelName -m

3) seeding 
(insert initial data in tables)

4) create model 

////////////////////////
/// Modification to existing table 

Column modification 
- add new column 
- rename column 
- delete column 
- change column order 
- change datatype or size of column 

Table modifications 
- rename table
- delete table 

1) Add new column 

// create migration file 
php artisan make:migration update_student_table --table=students

// add new line in Scheme::table 
$table->string('city');

// To apply the changes. 
php artisan migrate 

2) more on modification column

$table->renameColumn('from' , 'to');
$table->dropColumn('city');
$table->dropColumn(['city' , 'avatar']); // drop multiple columns
$table->string('name' , 50)->change();  // to change the size 

// to do multiple changes 

$table->integer('votes')->unsigned()->default(1)->comment('mycomment')->change();

// Change column order 
// new columns will be created after the password column 
$table->after('password' , function(Blueprint $table) {
    $table->string('address');
    $table->string('city');
});

// Table modification 

$table->rename('from' , 'to');
$table->drop('users');
Schema::dropIfExists('users');
if(Schema::hasTable('users')) {

}
if(Schema::hasColumn('tableName' , 'columnName')) {

}

// To rename table 
Schema::rename('students', 'newname');
Schema::dropIfExists('TableName');

// Constraints with migration 
NOT NULL , UNIQUE , DEFAULT , PRIMARY KEY

----------------------------------------------------------------
// if you want the column can have nulable value: 
$table->string('email')->nullable();
$table->string('email')->unique();
$table->string('city')->default('null');
$table->primary('uid'); // to set the column as primary key 
$table->foreign('usr_id')->references('id')->on('users');   // foregin key 

------------------------------------------------------------------

Column modifiers: 
->autoincrement()
->first() // set the colum on the first position 
->from($integer) // set the starting value of an auto-incrementing field
->invisible() // this colum will be hidden for select * query. 
->unsigned() // only +ve values. 
->useCurrent() // current timesamp will be added when we insert a row. 








